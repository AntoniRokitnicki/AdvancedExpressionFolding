package data;

import java.math.BigDecimal;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@SuppressWarnings("ALL")
public class SpreadTestData {
    public static void main(Stream<Data> stream, Data data, List<Data> list) {
        [0:"String"][221:"String"] empNames = list[2:".stream()"][4:".stream()"][223:".stream()"][225:".stream()"][1:"\n                .map("][222:"\n                .map("][3:"Data::getString"][5:"Data::getString"][224:"Data::getString"][226:"Data::getString"][1:")"][222:")"]
                .collect(Collectors.joining(", "));

        [6:"var"][227:"var"] p1 = data.[11:"getDataList()"][232:"getDataList()"][8:".stream()."][10:".stream()."][229:".stream()."][231:".stream()."]7:".map("][228:".map("][9:"Data::getData"][12:"Data::getData"][230:"Data::getData"][233:"Data::getData"][7:")"][228:")"].toList();
        [13:"var"][234:"var"] p2 = data.[22:"getDataList()"][243:"getDataList()"]
                [19:".stream()\n                ."][21:".stream()\n                ."][240:".stream()\n                ."][242:".stream()\n                ."]     .map("][239:"\n                .map("][20:"Data::getData"][23:"Data::getData"][241:"Data::getData"][244:"Data::getData"][18:")"][239:")"]
                .toList()
                [15:".stream()\n                ."][17:".stream()\n                ."][236:".stream()\n                ."][238:".stream()\n                ."]     .map("][235:"\n                .map("][16:"Data::getData"][24:"Data::getData"][237:"Data::getData"][245:"Data::getData"][14:")"][235:")"]
                .toList();

        [25:"var"][246:"var"] stream3 = Stream.of("123", "2313")[26:".map("][247:".map("][27:"String::length"][28:"String::length"][248:"String::length"][249:"String::length"][26:")"][247:")"].toList();

        [29:"var"][250:"var"] a = stream[38:".map("][52:".map("][64:".map("][74:".map("][82:".map("][88:".map("][92:".map("][94:".map("][130:".map("][144:".map("][156:".map("][166:".map("][174:".map("][180:".map("][184:".map("][186:".map("][259:".map("][273:".map("][285:".map("][295:".map("][303:".map("][309:".map("][313:".map("][315:".map("][351:".map("][365:".map("][377:".map("][387:".map("][395:".map("][401:".map("][405:".map("][407:".map("][39:"Data::getData"][53:"Data::getData"][65:"Data::getData"][75:"Data::getData"][83:"Data::getData"][89:"Data::getData"][93:"Data::getData"][95:"Data::getData"][96:"Data::getData"][131:"Data::getData"][145:"Data::getData"][157:"Data::getData"][167:"Data::getData"][175:"Data::getData"][181:"Data::getData"][185:"Data::getData"][187:"Data::getData"][188:"Data::getData"][260:"Data::getData"][274:"Data::getData"][286:"Data::getData"][296:"Data::getData"][304:"Data::getData"][310:"Data::getData"][314:"Data::getData"][316:"Data::getData"][317:"Data::getData"][352:"Data::getData"][366:"Data::getData"][378:"Data::getData"][388:"Data::getData"][396:"Data::getData"][402:"Data::getData"][406:"Data::getData"][408:"Data::getData"][409:"Data::getData"][38:")"][52:")"][64:")"][74:")"][82:")"][88:")"][92:")"][94:")"][130:")"][144:")"][156:")"][166:")"][174:")"][180:")"][184:")"][186:")"][259:")"][273:")"][285:")"][295:")"][303:")"][309:")"][313:")"][315:")"][351:")"][365:")"][377:")"][387:")"][395:")"][401:")"][405:")"][407:")"][37:".filter(Objects::nonNull"][51:".filter(Objects::nonNull"][63:".filter(Objects::nonNull"][73:".filter(Objects::nonNull"][81:".filter(Objects::nonNull"][87:".filter(Objects::nonNull"][91:".filter(Objects::nonNull"][129:".filter(Objects::nonNull"][143:".filter(Objects::nonNull"][155:".filter(Objects::nonNull"][165:".filter(Objects::nonNull"][173:".filter(Objects::nonNull"][179:".filter(Objects::nonNull"][183:".filter(Objects::nonNull"][258:".filter(Objects::nonNull"][272:".filter(Objects::nonNull"][284:".filter(Objects::nonNull"][294:".filter(Objects::nonNull"][302:".filter(Objects::nonNull"][308:".filter(Objects::nonNull"][312:".filter(Objects::nonNull"][350:".filter(Objects::nonNull"][364:".filter(Objects::nonNull"][376:".filter(Objects::nonNull"][386:".filter(Objects::nonNull"][394:".filter(Objects::nonNull"][400:".filter(Objects::nonNull"][404:".filter(Objects::nonNull"][37:")"][51:")"][63:")"][73:")"][81:")"][87:")"][91:")"][129:")"][143:")"][155:")"][165:")"][173:")"][179:")"][183:")"][258:")"][272:")"][284:")"][294:")"][302:")"][308:")"][312:")"][350:")"][364:")"][376:")"][386:")"][394:")"][400:")"][404:")"][36:"\n                .map("][50:"\n                .map("][62:"\n                .map("][72:"\n                .map("][80:"\n                .map("][86:"\n                .map("][128:"\n                .map("][142:"\n                .map("][154:"\n                .map("][164:"\n                .map("][172:"\n                .map("][178:"\n                .map("][257:"\n                .map("][271:"\n                .map("][283:"\n                .map("][293:"\n                .map("][301:"\n                .map("][307:"\n                .map("][349:"\n                .map("][363:"\n                .map("][375:"\n                .map("][385:"\n                .map("][393:"\n                .map("][399:"\n                .map("][40:"Data::getData"][54:"Data::getData"][66:"Data::getData"][76:"Data::getData"][84:"Data::getData"][90:"Data::getData"][97:"Data::getData"][132:"Data::getData"][146:"Data::getData"][158:"Data::getData"][168:"Data::getData"][176:"Data::getData"][182:"Data::getData"][189:"Data::getData"][261:"Data::getData"][275:"Data::getData"][287:"Data::getData"][297:"Data::getData"][305:"Data::getData"][311:"Data::getData"][318:"Data::getData"][353:"Data::getData"][367:"Data::getData"][379:"Data::getData"][389:"Data::getData"][397:"Data::getData"][403:"Data::getData"][410:"Data::getData"][36:")"][50:")"][62:")"][72:")"][80:")"][86:")"][128:")"][142:")"][154:")"][164:")"][172:")"][178:")"][257:")"][271:")"][283:")"][293:")"][301:")"][307:")"][349:")"][363:")"][375:")"][385:")"][393:")"][399:")"][35:".flatMap("][49:".flatMap("][61:".flatMap("][71:".flatMap("][79:".flatMap("][127:".flatMap("][141:".flatMap("][153:".flatMap("][163:".flatMap("][171:".flatMap("][256:".flatMap("][270:".flatMap("][282:".flatMap("][292:".flatMap("][300:".flatMap("][348:".flatMap("][362:".flatMap("][374:".flatMap("][384:".flatMap("][392:".flatMap("][41:"Data::getDataStream"][55:"Data::getDataStream"][67:"Data::getDataStream"][77:"Data::getDataStream"][85:"Data::getDataStream"][98:"Data::getDataStream"][133:"Data::getDataStream"][147:"Data::getDataStream"][159:"Data::getDataStream"][169:"Data::getDataStream"][177:"Data::getDataStream"][190:"Data::getDataStream"][262:"Data::getDataStream"][276:"Data::getDataStream"][288:"Data::getDataStream"][298:"Data::getDataStream"][306:"Data::getDataStream"][319:"Data::getDataStream"][354:"Data::getDataStream"][368:"Data::getDataStream"][380:"Data::getDataStream"][390:"Data::getDataStream"][398:"Data::getDataStream"][411:"Data::getDataStream"][35:")"][49:")"][61:")"][71:")"][79:")"][127:")"][141:")"][153:")"][163:")"][171:")"][256:")"][270:")"][282:")"][292:")"][300:")"][348:")"][362:")"][374:")"][384:")"][392:")"][34:"\n                .map("][48:"\n                .map("][60:"\n                .map("][70:"\n                .map("][126:"\n                .map("][140:"\n                .map("][152:"\n                .map("][162:"\n                .map("][255:"\n                .map("][269:"\n                .map("][281:"\n                .map("][291:"\n                .map("][347:"\n                .map("][361:"\n                .map("][373:"\n                .map("][383:"\n                .map("][42:"Data::getDataList"][56:"Data::getDataList"][68:"Data::getDataList"][78:"Data::getDataList"][99:"Data::getDataList"][134:"Data::getDataList"][148:"Data::getDataList"][160:"Data::getDataList"][170:"Data::getDataList"][191:"Data::getDataList"][263:"Data::getDataList"][277:"Data::getDataList"][289:"Data::getDataList"][299:"Data::getDataList"][320:"Data::getDataList"][355:"Data::getDataList"][369:"Data::getDataList"][381:"Data::getDataList"][391:"Data::getDataList"][412:"Data::getDataList"][34:")"][48:")"][60:")"][70:")"][126:")"][140:")"][152:")"][162:")"][255:")"][269:")"][281:")"][291:")"][347:")"][361:")"][373:")"][383:")"][33:".flatMap("][47:".flatMap("][59:".flatMap("][125:".flatMap("][139:".flatMap("][151:".flatMap("][254:".flatMap("][268:".flatMap("][280:".flatMap("][346:".flatMap("][360:".flatMap("][372:".flatMap("][43:"List::stream"][57:"List::stream"][69:"List::stream"][100:"List::stream"][135:"List::stream"][149:"List::stream"][161:"List::stream"][192:"List::stream"][264:"List::stream"][278:"List::stream"][290:"List::stream"][321:"List::stream"][356:"List::stream"][370:"List::stream"][382:"List::stream"][413:"List::stream"][33:")"][47:")"][59:")"][125:")"][139:")"][151:")"][254:")"][268:")"][280:")"][346:")"][360:")"][372:")"][32:"\n                .map("][46:"\n                .map("][124:"\n                .map("][138:"\n                .map("][253:"\n                .map("][267:"\n                .map("][345:"\n                .map("][359:"\n                .map("][44:"Data::getString"][58:"Data::getString"][101:"Data::getString"][136:"Data::getString"][150:"Data::getString"][193:"Data::getString"][265:"Data::getString"][279:"Data::getString"][322:"Data::getString"][357:"Data::getString"][371:"Data::getString"][414:"Data::getString"][32:")"][46:")"][124:")"][138:")"][253:")"][267:")"][345:")"][359:")"][31:".map("][123:".map("][252:".map("][344:".map("][45:"String::chars"][102:"String::chars"][137:"String::chars"][194:"String::chars"][266:"String::chars"][323:"String::chars"][358:"String::chars"][415:"String::chars"][31:")"][123:")"][252:")"][344:")"]
                .map(it -> it.count()[103:"+"][195:"+"][324:"+"][416:"+"]1)
                .map(it -> {
                    [104:"var"][196:"var"][325:"var"][417:"var"] z = 2;
                    [105:"var"][197:"var"][326:"var"][418:"var"] max = Stream.of(data)[110:".map("][116:".map("][202:".map("][208:".map("][331:".map("][337:".map("][423:".map("][429:".map("][111:"Data::getString"][112:"Data::getString"][117:"Data::getString"][118:"Data::getString"][203:"Data::getString"][204:"Data::getString"][209:"Data::getString"][210:"Data::getString"][332:"Data::getString"][333:"Data::getString"][338:"Data::getString"][339:"Data::getString"][424:"Data::getString"][425:"Data::getString"][430:"Data::getString"][431:"Data::getString"][110:")"][116:")"][202:")"][208:")"][331:")"][337:")"][423:")"][429:")"].max(Comparator.comparing(String::length))[109:".map("][115:".map("][201:".map("][207:".map("][330:".map("][336:".map("][422:".map("][428:".map("][113:"String::length"][119:"String::length"][205:"String::length"][211:"String::length"][334:"String::length"][340:"String::length"][426:"String::length"][432:"String::length"][109:")"][115:")"][201:")"][207:")"][330:")"][336:")"][422:")"][428:")"].stream()[108:".map("][200:".map("][329:".map("][421:".map("][114:"Object::getClass"][120:"Object::getClass"][206:"Object::getClass"][212:"Object::getClass"][335:"Object::getClass"][341:"Object::getClass"][427:"Object::getClass"][433:"Object::getClass"][108:")"][200:")"][329:")"][421:")"].findAny()[107:".map("][199:".map("][328:".map("][420:".map("][121:"Object::hashCode"][213:"Object::hashCode"][342:"Object::hashCode"][434:"Object::hashCode"][107:")"][199:")"][328:")"][420:")"][106:".orElse("][198:".orElse("][327:".orElse("][419:".orElse("]1[106:")"][198:")"][327:")"][419:")"];
                    return new BigDecimal(it + z + max);
                })
                .map(it -> Stream.iterate(it, BigDecimal::plus))
                .map(it -> stream)
                .flatMap(Function.identity())[30:"\n                .map("][251:"\n                .map("][122:"Data::isOk"][214:"Data::isOk"][343:"Data::isOk"][435:"Data::isOk"][30:")"][251:")"]
                .toList();

        [215:"var"][436:"var"] p = methodStream(data).toList()[218:".stream()."][439:".stream()."]min(Comparator.comparing(Data::isOk)).stream().min(Comparator.comparing(Data::getString))[217:".map("][438:".map("][219:"Data::getString"][440:"Data::getString"][217:")"][438:")"][216:".orElse("][437:".orElse("]"string1"[216:")"][437:")"];


        [220:"var"][441:"var"] o1 = stream.map(Data::new).filter(Data.class::isInstance).map(Data.class::cast);
    }

    static Stream<Data> methodStream(Data data) {[442:"\n        "][442:"return"][442:" "]Stream.of(data)[442:";"][442:"\n    "]}

    [443:"s"]tatic class Data {
        [444:"D"]ata data;
        boolean ok;
        String string;[444:"\n\n        "][444:"public Data(Data data) {\n            this.data = data;\n        }"]data"][447:"data"][448:"data"][449:"data"][445:";"][445:"\n        "]}[443:"\n\n        "][443:"public Data getData() {\n                return data;\n        }"]][450:" "]data[450:";"][450:"\n        "]}[443:"\n        "][443:"public boolean isOk() {\n                return ok;\n        }"]n"][451:" "]ok[451:";"][451:"\n        "]}[443:"\n        "][443:"public void setData(Data data) {\n                this.data = data;\n        }"]data"][454:"data"][455:"data"][456:"data"][452:";"][452:"\n        "]}[443:"\n        "][443:"public void setOk(boolean ok) {\n                this.ok = ok;\n        }"]:"ok"][459:"ok"][460:"ok"][461:"ok"][457:";"][457:"\n        "]}[443:"\n        "][443:"public String getString() {\n                return string;\n        }"]462:" "]string[462:";"][462:"\n        "]}[443:"\n        "][443:"public void setString(String string) {\n                this.string = string;\n        }"]ring"][465:"string"][466:"string"][467:"string"][463:";"][463:"\n        "]}
        public Data getDataMethod(Data data) {[468:"\n                "][468:"return"][468:" "]data[468:";"][468:"\n        "]}
        public Optional<Data> getDataOpt() {[469:"\n                "][469:"return"][469:" "][470:"Optional.ofNullable("][471:"Optional.ofNullable("]data[470:")"][471:")"][469:";"][469:"\n        "]}
        public Stream<Data> getDataStream() {[472:"\n                "][472:"return"][472:" "][473:"Optional.ofNullable("][474:"Optional.ofNullable("]data[473:")"][474:")"].stream()[472:";"][472:"\n        "]}
        public List<Data> getDataList() {[475:"\n                "][475:"return"][475:" "][476:"Optional.ofNullable("][477:"Optional.ofNullable("]data[476:")"][477:")"].stream().toList()[475:";"][475:"\n        "]}
    }
}
