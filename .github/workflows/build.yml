name: Build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'wiki'
      - 'wiki/**'
      - '**/*.md'
      - 'pages/**'
      - 'complete-project-documentation.yaml'
      - '**/*.sh'
      - '**/*.main.kts'
  pull_request_target:
    paths-ignore:
      - 'wiki'
      - 'wiki/**'
      - '**/*.md'
      - 'pages/**'
      - 'complete-project-documentation.yaml'
      - '**/*.sh'
      - '**/*.main.kts'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    if: >
      (github.event_name == 'push' &&
        !contains(github.event.head_commit.message, '[skip ci]') &&
        !contains(github.event.head_commit.message, '[ci skip]') &&
        !contains(github.event.head_commit.message, '[no ci]') &&
        !contains(github.event.head_commit.message, '[skip actions]') &&
        !contains(github.event.head_commit.message, '[actions skip]')
      ) ||
      (github.event_name == 'pull_request_target' &&
        !contains(github.event.pull_request.labels.*.name, 'skip-build') &&
        !contains(github.event.pull_request.title || '', '[skip ci]') &&
        !contains(github.event.pull_request.body  || '', '[skip ci]')
      )
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-home-cache-cleanup: true

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Build plugin
        run: ./gradlew buildPlugin

      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE/build/distributions"
          FILENAME=$(ls *.zip)
          unzip "$FILENAME" -d content
          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  test:
    name: Test
    needs: [ build ]
    if: >
      (github.event_name == 'push' &&
        !contains(github.event.head_commit.message, '[skip ci]') &&
        !contains(github.event.head_commit.message, '[ci skip]') &&
        !contains(github.event.head_commit.message, '[no ci]') &&
        !contains(github.event.head_commit.message, '[skip actions]') &&
        !contains(github.event.head_commit.message, '[actions skip]')
      ) ||
      (github.event_name == 'pull_request_target' &&
        !contains(github.event.pull_request.labels.*.name, 'skip-build') &&
        !contains(github.event.pull_request.title || '', '[skip ci]') &&
        !contains(github.event.pull_request.body  || '', '[skip ci]')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-home-cache-cleanup: true

      - name: Run Tests
        id: tests
        run: ./gradlew check

      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v5
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v5
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

      - name: Find test summary comment
        if: ${{ always() && github.event_name == 'pull_request_target' }}
        uses: peter-evans/find-comment@v3
        id: find_test_summary_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '`./gradlew check` summary'

      - name: Prepare test summary
        if: ${{ always() && github.event_name == 'pull_request_target' }}
        id: test_summary
        run: |
          if [ "${TEST_OUTCOME}" = "success" ]; then
            echo "status_icon=✅" >> "$GITHUB_OUTPUT"
            echo "status_message=completed successfully" >> "$GITHUB_OUTPUT"
          else
            echo "status_icon=❌" >> "$GITHUB_OUTPUT"
            echo "status_message=failed" >> "$GITHUB_OUTPUT"
          fi
        env:
          TEST_OUTCOME: ${{ steps.tests.outcome }}

      - name: Post test summary comment
        if: ${{ always() && github.event_name == 'pull_request_target' }}
        uses: peter-evans/create-or-update-comment@v5
        with:
          comment-id: ${{ steps.find_test_summary_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### `./gradlew check` summary
            ${{ steps.test_summary.outputs.status_icon }} `./gradlew check` ${{ steps.test_summary.outputs.status_message }}.

            - Reports: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts
            - Coverage XML: `build/reports/kover/report.xml`

  inspectCode:
    name: Inspect code
    if: ${{ false }}
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
      - name: Fetch Sources
        uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 17
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.1
        with:
          cache-default-branch-only: true

  verify:
    name: Verify plugin
    if: ${{ false }}
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
      - name: Fetch Sources
        uses: actions/checkout@v5
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-home-cache-cleanup: true
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v5
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  releaseDraft:
    name: Release draft
    if: github.event_name == 'push'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v5
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases --jq '.[] | select(.draft == true) | .id' | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" --draft --title "v${{ needs.build.outputs.version }}" --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
