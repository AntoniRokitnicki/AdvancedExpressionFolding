name: "TODO to Issue Creator"

on:
  workflow_dispatch:
    inputs:
      INSERT_ISSUE_URLS:
        description: "Insert issue URLs back to code"
        type: boolean
        default: true
      AUTO_ASSIGN:
        description: "Auto-assign issues to actor"
        type: boolean
        default: true
      CLOSE_ISSUES:
        description: "Close issues when TODO removed"
        type: boolean
        default: true
      AUTO_P:
        description: "Auto-format issue body"
        type: boolean
        default: true

jobs:
  build:
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Capture workflow start time
        id: todo-to-issue-start
        run: echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "${GITHUB_OUTPUT}"

      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        id: todo-to-issue
        uses: "alstr/todo-to-issue-action@v5.1.13"
        with:
          AUTO_ASSIGN: "${{ inputs.AUTO_ASSIGN }}"
          CLOSE_ISSUES: "${{ inputs.CLOSE_ISSUES }}"
          AUTO_P: "${{ inputs.AUTO_P }}"
          INSERT_ISSUE_URLS: "${{ inputs.INSERT_ISSUE_URLS }}"
          TITLE: "TODO: {{ firstLine }} â€¢ auto-created from ${{ github.ref_name }}"
          IDENTIFIERS: '[{"name": "TODO", "labels": ["TODO"]}]'
          ISSUE_TEMPLATE: |
            ## TODO extracted from code comment

            **Source:** ${{ github.repository }} @ ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Author:** ${{ github.actor }}

            ---
            **Detected TODO:**
            > {{ body }}

            **File and line:**
            {{ url }}

            **Code context:**
            {{ snippet }}
            ---
            _This issue was automatically generated by [TODO to Issue Action](https://github.com/alstr/todo-to-issue-action)._
      - name: Summarize TODO to Issue results
        id: summarize-todo-to-issue
        if: ${{ steps.todo-to-issue.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ github.token }}
          START_TIME: ${{ steps.todo-to-issue-start.outputs.timestamp }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -eo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            if command -v sudo >/dev/null 2>&1; then
              sudo apt-get update -y >/dev/null
              sudo apt-get install -y jq >/dev/null
            else
              apt-get update -y >/dev/null
              apt-get install -y jq >/dev/null
            fi
          fi

          if [ -z "$START_TIME" ]; then
            START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          fi

          query="repo:${REPOSITORY} label:TODO created:>=$START_TIME"
          payload=$(jq -n --arg q "$query" '{query:"query($query:String!){ search(query:$query, type: ISSUE, first: 100) { issueCount } }", variables:{query:$q}}')

          set +e
          response=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" -H "Content-Type: application/json" -d "$payload" https://api.github.com/graphql)
          status=$?
          set -e

          if [ ${status} -ne 0 ] || [ -z "$response" ]; then
            echo "Failed to retrieve issue count from GitHub GraphQL API" >&2
            created=0
          else
            created=$(echo "$response" | jq -r '.data.search.issueCount // 0')
          fi

          echo "created=${created}" >> "${GITHUB_OUTPUT}"
          {
            echo "### TODO to Issue summary"
            echo
            echo "* Issues created: ${created}"
          } >> "${GITHUB_STEP_SUMMARY}"

          echo "Issues created: ${created}"
      - name: Set Git user
        if: steps.todo-to-issue.outputs.changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Commit and Push Changes
        if: steps.todo-to-issue.outputs.changes == 'true'
        run: |
          git pull --rebase origin ${{ github.ref_name }}
          git add -A
          git commit -m "Add GitHub issue links to TODOs"
          git push origin ${{ github.ref_name }} || exit 1
