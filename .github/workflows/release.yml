# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: _Release
on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types: [closed]

jobs:

  debug:
    name: Debug Information
    runs-on: ubuntu-latest
    steps:
      - name: Print Debug Information
        run: |
          echo "Event Name: ${{ github.event_name }}"
          event_name_check=$(if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then echo "true"; else echo "false"; fi)
          echo "Is PR Merged?: ${{ github.event.pull_request.merged }}"
          merged_check=$(if [[ "${{ github.event.pull_request.merged }}" == 'true' ]]; then echo "true"; else echo "false"; fi)
          echo "PR Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"
          labels_check=$(if [[ $(contains(github.event.pull_request.labels.*.name, 'autorelease')) == 'true' ]]; then echo "true"; else echo "false"; fi)
          echo "Contains 'autorelease' Label: $labels_check"
          echo "Workflow Dispatch Triggered: $event_name_check"
          push_event_check=$(if [[ "${{ github.event_name }}" == 'pull_request' && "${{ github.event.pull_request.merged }}" == 'true' ]]; then echo "true"; else echo "false"; fi)
          echo "Push Event and PR Merged: $push_event_check"
          if [[ $event_name_check == 'true' || ($event_name_check == 'false' && $merged_check == 'true' && $labels_check == 'true') ]]; then
            echo "Overall Condition: true"
          else
            echo "Overall Condition: false"
          fi

  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'autorelease'))
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Update Unreleased section with the current release note
      - name: Patch Changelog (off)
        if: ${{ false }}
        env:
          CHANGELOG: ${{ steps.properties.outputs.changelog }}
        run: |
          ./gradlew patchChangelog --release-note="$CHANGELOG"

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Upload JAR
      - name: Upload JAR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew uploadJar

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      # Upload artifact as a release asset
      - name: Upload Release Asset (off)
        if: ${{ false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*

      # Create a pull request
      - name: Create Pull Request (off)
        if: ${{ false && steps.properties.outputs.changelog != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          BRANCH="changelog-update-$VERSION"
          LABEL="release changelog"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          git checkout -b $BRANCH
          git commit -am "Changelog update - $VERSION"
          git push --set-upstream origin $BRANCH
          
          gh label create "$LABEL" \
            --description "Pull requests with release changelog update" \
            --force \
            || true

          gh pr create \
            --title "Changelog update - \`$VERSION\`" \
            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
            --label "$LABEL" \
            --head $BRANCH
