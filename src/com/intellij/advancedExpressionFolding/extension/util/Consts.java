package com.intellij.advancedExpressionFolding.extension.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

public interface Consts {

    Set<String> SUPPORTED_CLASSES = new HashSet<>() {
        {
            add("java.math.BigDecimal");
            add("java.math.BigInteger");
            add("java.lang.Math");
            add("java.lang.Long");
            add("java.lang.Integer");
            add("java.lang.Float");
            add("java.lang.Double");
            add("java.lang.Character");
            add("java.lang.String");
            add("java.lang.StringBuilder");
            add("java.lang.AbstractStringBuilder");
            add("java.util.List");
            add("java.util.ArrayList");
            add("java.util.Map");
            add("java.util.HashMap");
            add("java.util.Set");
            add("java.util.HashSet");
            add("java.lang.Object");
            add("java.util.Arrays");
            add("java.util.Optional");
            add("java.util.Collection");
            add("java.util.Collections");
            add("java.util.Objects");
            add("java.util.stream.Stream");
            add("java.io.PrintStream");
        }
    };
    Set<String> UNSUPPORTED_CLASSES_METHODS_EXCEPTIONS = new HashSet<>() {
        {
            add("equals");
            add("compareTo");
        }
    };
    Set<String> SUPPORTED_PRIMITIVE_TYPES = new HashSet<String>() {
        {
            add("int");
            add("long");
            add("float");
            add("double");
            add("char");
            add("java.lang.String");
        }
    };
    Set<String> SUPPORTED_BINARY_OPERATORS = new HashSet<String>() {
        {
            add("+");
            add("-");
            add("*");
            add("/");
        }
    };
    Map<String, Object> SUPPORTED_CONSTANTS = new HashMap<>() {
        {
            put("ZERO", 0);
            put("ONE", 1);
            put("TEN", 10);
            put("PI", "œÄ");
            put("E", "\uD835\uDC52");
        }
    };
    Pattern GENERICS_PATTERN = Pattern.compile("<[^<>]*>");
    Map<Character, Character> SUPERSCRIPT_MAPPING = new HashMap<>() {
        {
            put('0', '‚Å∞');
            put('1', '¬π');
            put('2', '¬≤');
            put('3', '¬≥');
            put('4', '‚Å¥');
            put('5', '‚Åµ');
            put('6', '‚Å∂');
            put('7', '‚Å∑');
            put('8', '‚Å∏');
            put('9', '‚Åπ');
            put('(', '‚ÅΩ');
            put(')', '‚Åæ');
            put('+', '‚Å∫');
            put('‚Åª', '‚Åª');
            put('n', '‚Åø');
            put('i', '‚Å±');
            put('a', '·µÉ');
            put('b', '·µá');
            put('c', '·∂ú');
            put('d', '·µà');
            put('e', '·µâ');
            put('f', '·∂†');
            put('g', '·µç');
            put('h', ' ∞');
            put('j', ' ≤');
            put('k', '·µè');
            put('l', 'À°');
            put('m', '·µê');
            put('o', '·µí');
            put('p', '·µñ');
            put('r', ' ≥');
            put('s', 'À¢');
            put('t', '·µó');
            put('u', '·µò');
            put('w', ' ∑');
            put('*', 'À£');
            put('x', 'À£');
            put('y', ' ∏');
            put('z', '·∂ª');
            put('A', '·¥¨');
            put('B', '·¥Æ');
            put('D', '·¥∞');
            put('E', '·¥±');
            put('G', '·¥≥');
            put('H', '·¥¥');
            put('I', '·¥µ');
            put('J', '·¥∂');
            put('K', '·¥∑');
            put('L', '·¥∏');
            put('M', '·¥π');
            put('N', '·¥∫');
            put('O', '·¥º');
            put('P', '·¥æ');
            put('R', '·¥ø');
            put('T', '·µÄ');
            put('U', '·µÅ');
            put('V', '‚±Ω');
            put('W', '·µÇ');
            put(' ', '‚ù§');
        }
    };

    Map<Character, Character> SUBSCRIPT_MAPPING = new HashMap<>() {
        {
            put('0', '‚ÇÄ');
            put('1', '‚ÇÅ');
            put('2', '‚ÇÇ');
            put('3', '‚ÇÉ');
            put('4', '‚ÇÑ');
            put('5', '‚ÇÖ');
            put('6', '‚ÇÜ');
            put('7', '‚Çá');
            put('8', '‚Çà');
            put('9', '‚Çâ');
            put('+', '‚Çä');
            put('-', '‚Çã');
            put('(', '‚Çç');
            put(')', '‚Çé');
            put('a', '‚Çê');
            put('e', '‚Çë');
            put('x', '‚Çì');
            put('i', '·µ¢');
            put('j', '‚±º');
            put('o', '‚Çí');
            put('r', '·µ£');
            put('u', '·µ§');
            put('v', '·µ•');
            put(' ', '‚ù§');
        }
    };


    enum Emoji {
        FINAL_LOCK("\uD83D\uDD12"), //üîí
        SINGLETON_MAN_STANDING("\uD83E\uDDCD"),// üßç
        ;

        private final String unicode;

        Emoji(String unicode) {
            this.unicode = unicode;
        }

        @Override
        public String toString() {
            return unicode;
        }
    }

}
