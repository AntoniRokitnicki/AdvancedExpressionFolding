<idea-plugin>
    <id>com.github.advanced-java-folding2</id>
    <name>Advanced Java Folding 2 (Fork)</name>
    <vendor email="android.rokitnicki@gmail.com" url="https://github.com/AntoniRokitnicki/AdvancedExpressionFolding">
        Antoni
    </vendor>

    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
        <lang.foldingBuilder language="JAVA"
                             implementationClass="com.intellij.advancedExpressionFolding.AdvancedExpressionFoldingBuilder"/>
        <applicationService
                serviceImplementation="com.intellij.advancedExpressionFolding.AdvancedExpressionFoldingSettings"/>
        <editorFactoryListener implementation="com.intellij.advancedExpressionFolding.FoldingEditorCreatedListener"/>
        <intentionAction>
            <language>JAVA</language>
            <className>
                com.intellij.advancedExpressionFolding.extension.methodcall.dynamic.AddDynamicMethodFoldingIntention
            </className>
        </intentionAction>

        <errorHandler implementation="com.intellij.diagnostic.JetBrainsMarketplaceErrorReportSubmitter"/>

        <editorOptionsProvider
                instance="com.intellij.advancedExpressionFolding.settings.SettingsConfigurable"
                id="editor.folding.advanced.expression"
                displayName="Advanced Expression Folding 2"/>
    </extensions>

    <applicationListeners>
        <listener class="com.intellij.advancedExpressionFolding.PluginUnloadingListener" topic="com.intellij.ide.plugins.DynamicPluginListener"/>
    </applicationListeners>

    <actions>
        <group id="AdvancedExpressionFolding2Group"
               text="Advanced Folding: Searches"
               description="Advanced expression folding search operations"
               popup="true">
            <add-to-group group-id="CodeMenu" anchor="last"/>
            <action id="FindMethodsWithDefaultParametersAction"
                    class="com.intellij.advancedExpressionFolding.FindMethodsWithDefaultParametersAction"
                    text="Find Methods with Default Parameters"
                    description="Searches the project for methods that use default parameter values"/>
        </group>

        <action id="advanced.folding.toggle.global"
                class="com.intellij.advancedExpressionFolding.GlobalToggleFoldingAction"
                text="Advanced Folding: Global" description="Toggle advanced folding globally across all files">
            <add-to-group group-id="CodeMenu" anchor="last"/>
        </action>

        <action id="advanced.folding.toggle.on" class="com.intellij.advancedExpressionFolding.FoldingOnAction"
                text="Advanced Folding: Activate" description="Activate advanced folding in the current file"
                icon="AllIcons.Actions.ArrowExpand">
            <add-to-group group-id="CodeMenu" anchor="last"/>
            <keyboard-shortcut first-keystroke="alt shift F" keymap="$default" replace-all="true"/>
            <keyboard-shortcut first-keystroke="alt T" keymap="Mac OS X 10.5+" replace-all="true"/>
        </action>

        <action id="advanced.folding.toggle.off" class="com.intellij.advancedExpressionFolding.FoldingOffAction"
                text="Advanced Folding: Deactivate" description="Deactivate advanced folding in the current file"
                icon="AllIcons.Actions.ArrowCollapse">
            <add-to-group group-id="CodeMenu" anchor="last"/>
            <keyboard-shortcut first-keystroke="alt shift D" keymap="$default"/>
            <keyboard-shortcut first-keystroke="alt Y" keymap="Mac OS X 10.5+" replace-all="true"/>
        </action>

    </actions>

    <extensionPoints>
        <extensionPoint name="methodCallFolding"
                        interface="com.intellij.advancedExpressionFolding.extension.methodcall.AbstractMethodCall"
                        dynamic="true"/>

        <extensionPoint name="expressionBuilder"
                        interface="com.intellij.advancedExpressionFolding.extension.BuildExpression"
                        dynamic="true"/>
    </extensionPoints>
    <extensions defaultExtensionNs="com.github.advanced-java-folding2">
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.date.BeforeDateMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.date.AfterDateMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.date.CreateDateFactoryMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.nullable.CheckNotNullMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.collection.MapPutMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.collection.CollectionGetMethodCall"/>
        <methodCallFolding
                implementation="com.intellij.advancedExpressionFolding.extension.methodcall.collection.OptionalGetMethodCall"/>
    </extensions>

    <extensions defaultExtensionNs="com.github.advanced-java-folding2">
        <!-- Basic/Generic implementation -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.PrintlnMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.EqualsMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.AppendMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CharAtMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.SubstringOrSubListMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ToStringMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ValueOfMethodCall"/>

        <!-- Optional implementations -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.OptionalOfNullableMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.OptionalOfMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.OptionalMapMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.OptionalOrElseMethodCall"/>

        <!-- Stream implementations -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.StreamFilterMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.StreamMapMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.StreamCollectMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.StreamMethodCall"/>

        <!-- Collection implementations -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionAddMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionRemoveMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionAddAllMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionRemoveAllMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionStreamMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionsUnmodifiableSetMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.CollectionsUnmodifiableListMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArraysListMethodCall"/>


        <!-- Arithmetic implementations -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticAddMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticSubtractMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticMultiplyMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticDivideMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticRemainderMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticAndNotMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticPowMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticMinMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticMaxMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticGcdMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticAndMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticOrMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticXorMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticShiftLeftMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticShiftRightMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticAtan2MethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticPlusMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticNegateMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticNotMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticAbsMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.ArithmeticSignumMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathRandomMethodCall"/>

        <!-- Math Method Calls -->
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathAbsMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathAcosMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathAsinMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathAtanMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathCbrtMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathCeilMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathCosMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathCoshMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathExpMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathFloorMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathLogMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathLog10MethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathRintMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathRoundMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathSinMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathSinhMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathSqrtMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathTanMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathTanhMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathToDegreesMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathToRadiansMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathUlpMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathMinMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathMaxMethodCall"/>
        <methodCallFolding implementation="com.intellij.advancedExpressionFolding.extension.methodcall.extracted.MathPowMethodCall"/>

    </extensions>


    <extensions defaultExtensionNs="com.github.advanced-java-folding2">
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ForStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ForeachStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.IfStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.WhileStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.SemicolonBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.TokenBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.CatchSectionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.DoWhileStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.SwitchStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ArrayAccessExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.MethodCallExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ReferenceExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.NewExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.LiteralExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.AssignmentExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.PolyadicExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.BinaryExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ConditionalExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.PrefixExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ParenthesizedExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.TypeCastExpressionBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.DeclarationStatementBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.VariableBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.CodeBlockBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ClassBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.FieldBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.ParameterBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.RecordComponentBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.MethodBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.KeywordBuilder"/>
        <expressionBuilder
                implementation="com.intellij.advancedExpressionFolding.extension.TryStatementBuilder"/>
    </extensions>

</idea-plugin>
